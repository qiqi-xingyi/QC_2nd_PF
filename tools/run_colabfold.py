# --*-- conding:utf-8 --*--
# @time:9/9/25 21:36
# @Author : Yuqi Zhang
# @Email : yzhan135@kent.edu
# @File:run_colabfold.py

"""
Run ColabFold batch prediction from Python (IDE-friendly).
Inputs:
  - data/seqs_len10_all.fasta (generated by make_multifasta.py)
Outputs:
  - results/colabfold_out/ (standard ColabFold outputs)
Notes:
  - Requires 'colabfold_batch' executable available in current environment.
"""

import shutil
import subprocess
from pathlib import Path
import sys

def ensure_executable(name: str):
    path = shutil.which(name)
    if path is None:
        raise RuntimeError(
            f"Executable '{name}' not found in PATH. "
            f"Please install ColabFold in the current environment."
        )
    return path

def run_colabfold(in_fa: Path, out_dir: Path,
                  amber: bool = True,
                  templates: bool = True,
                  num_models: int = 5,
                  num_recycle: int = 3):
    exe = ensure_executable("colabfold_batch")
    cmd = [
        exe,
        str(in_fa),
        str(out_dir)
    ]
    if amber:
        cmd.append("--amber")
    if templates:
        cmd.append("--templates")
    cmd += ["--num-models", str(num_models),
            "--num-recycle", str(num_recycle)]

    out_dir.mkdir(parents=True, exist_ok=True)
    print("[run_colabfold] running:", " ".join(cmd))
    subprocess.run(cmd, check=True)
    print(f"[run_colabfold] finished. Outputs in {out_dir}")

def main():
    proj = Path(__file__).resolve().parents[1]
    in_fa = proj / "data" / "seqs_len10_all.fasta"
    out_dir = proj / "results" / "colabfold_out"

    if not in_fa.exists():
        print(f"[run_colabfold] input FASTA not found: {in_fa}")
        print("Run tools/make_multifasta.py first.")
        sys.exit(1)

    run_colabfold(in_fa, out_dir,
                  amber=True,
                  templates=True,
                  num_models=5,
                  num_recycle=3)

if __name__ == "__main__":
    main()
